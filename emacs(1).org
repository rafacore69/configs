#+title: Emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes

* Basics
** User Interface

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)
  (column-number-mode)
  (global-display-line-numbers-mode t)

  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  eshell-mode-hook
                  shell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;File for custome set variables
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
  
  (setq undo-limit 80000000
        evil-want-fine-undo t
        auto-save-default t
        password-cache-expiry nil
        scroll-margin 2)
  
  (global-subword-mode 1)
  
  
#+end_src

** Fonts

#+begin_src emacs-lisp
;; Font Configuration ----------------------------------------------------------

(set-face-attribute 'default nil :font "Inconsolata")

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "Inconsolata")

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "Cantarell":weight 'regular)

#+end_src

** Initialize packages

#+begin_src emacs-lisp

;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

* Window Manager
** Exwm
#+begin_src emacs-lisp
    (defun efs/run-in-background (command)
      (let ((command-parts (split-string command "[ ]+")))
        (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

    (defun efs/exwm-init-hook ()
      ;; Make workspace 1 be the one where we land at startup
      (exwm-workspace-switch-create 1)

      ;; Open eshell by default
      ;(eshell)

      ;; Show battery status in the mode line
      (display-battery-mode 1)

      ;; Show the time and date in modeline
      (setq display-time-day-and-date t)
      (display-time-mode 1)
      ;; Also take a look at display-time-format and format-time-string

      ;; Launch apps that will run in the background
      (efs/run-in-background "nm-applet")
      (efs/run-in-background "pasystray")
      (efs/run-in-background "blueman-applet"))


      (defun efs/exwm-update-class ()
        (exwm-workspace-rename-buffer exwm-class-name))

      (defun efs/exwm-update-title ()
        (pcase exwm-class-name
          ("Firefox" (exwm-workspace-rename-buffer (format "Firefox: %s" exwm-title)))))

      (use-package exwm
        :config
        ;; Set the default number of workspaces
        (setq exwm-workspace-number 5)

        ;; When window "class" updates, use it to set the buffer name
        (add-hook 'exwm-update-class-hook #'efs/exwm-update-class)

        ;; When EXWM starts up, do some extra confifuration
        (add-hook 'exwm-init-hook #'efs/exwm-init-hook)

        ;; When window title updates, use it to set the buffer name
        (add-hook 'exwm-update-title-hook #'efs/exwm-update-title)

        ;;; Load the system tray before exwm-init
        (require 'exwm-systemtray)
        (exwm-systemtray-enable)

        ;; These keys should always pass through to Emacs
        (setq exwm-input-prefix-keys
          '(?\C-x
            ?\C-u
            ?\C-h
            ?\M-x
            ?\M-`
            ?\M-&
            ?\M-:
            ?\C-\M-j  ;; Buffer list
            ?\C-\ ))  ;; Ctrl+Space

        ;; Ctrl+Q will enable the next key to be sent directly
        (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

        ;; Set up global key bindings.  These always work, no matter the input state!
        ;; Keep in mind that changing this list after EXWM initializes has no effect.
        (setq exwm-input-global-keys
              `(
                ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
                ([?\s-r] . exwm-reset)

                ;; Move between windows
                ([?\s-i] . windmove-left)
                ([?\s-m] . windmove-right)
                ([?\s-e] . windmove-up)
                ([?\s-n] . windmove-down)

                ;; Launch applications via shell command
                ([?\s-&] . (lambda (command)
                             (interactive (list (read-shell-command "$ ")))
                             (start-process-shell-command command nil command)))

                ;; Switch workspace
                ([?\s-w] . exwm-workspace-switch)
                ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))

                ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
                ,@(mapcar (lambda (i)
                            `(,(kbd (format "s-%d" i)) .
                              (lambda ()
                                (interactive)
                                (exwm-workspace-switch-create ,i))))
                          (number-sequence 0 9))))

        (exwm-input-set-key (kbd "s-SPC") 'counsel-linux-app)

        (exwm-enable))


  (use-package desktop-environment
    :after exwm
    :config (desktop-environment-mode)
    :custom
    (desktop-environment-brightness-small-increment "2%+")
    (desktop-environment-brightness-small-decrement "2%-")
    (desktop-environment-brightness-normal-increment "5%+")
    (desktop-environment-brightness-normal-decrement "5%-"))
#+end_src

* Pakages
** LaTex
*** AucTex
#+begin_src emacs-lisp

  (use-package auctex
    :after latex)

#+end_src
** Rainbow delimiters

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
               :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Ivy

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)	
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :init
    (ivy-mode 1))
#+end_src

** Doom theme and modeline

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-acario-light t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

** Keybinds
*** Evil Mode

#+begin_src emacs-lisp

(use-package evil
  :init
 (setq evil-want-integration t)
 (setq evil-want-keybinding nil)
 (setq evil-want-C-u-scroll t)
 :config
 (evil-mode 1)
 (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
 (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-char)
 (evil-global-set-key 'motion "j" 'evil-next-visual-line)
 (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
 (evil-set-initial-state 'messages-buffer-mode 'normal)
 (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

#+end_src

*** Colemak
#+begin_src emacs-lisp
;  (use-package evil-colemak-basics
;    :init
;    (setq evil-colemak-basics-layout-mod 'mod-dh)
;    :config
;    (global-evil-colemak-basics-mode))
#+End_src
*** General improvements

#+begin_src emacs-lisp

  (use-package paredit)

  (use-package general)
  ;(general-define-key
  ; "C-M-j" 'counsel-switch-buffer)

  (general-create-definer rune/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (rune/leader-keys
   "t" '(:ignore t :which-key "toggles")
   "tt" '(counsel-load-theme :which-key "choose theme")
   "h" '(help-command :which-key "help")
   "f" '(:ignore t :which-key "file")
   "fw" '(save-buffer :which-key "write")
   "fs" '(save-buffer :which-key "save")
   "w" '(:ignore t :which-key "window")
   "wd" '(delete-window :which-key "delete window")
   "ws" '(switch-to-buffer-other-window :which-key "horizontal split")
   "wb" '(split-window-below :which-key "horizontal split")
   "wv" '(split-window-right :which-key "vertical split")
   "wn" '(other-window :which-key "next window"))
  (use-package hydra)

  (defhydra hydra-text-scale (:timeout 4)
    ("n" text-scale-increase "in")
    ("e" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (rune/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale-text"))

  (defhydra hydra-window-scale (:timeout 4)
    ("{" enlarge-window-horizontally "enlarge")
    ("}" shrink-window-horizontally "shrink")
    ("q" nil "quit" :exit t))

  (rune/leader-keys
    "tw" '(hydra-window-scale/body :which-key :"scale-window"))

#+end_src
*** Key chords

#+begin_src emacs-lisp
    (use-package key-chord
      :config (key-chord-mode 1))
  ;Normal mode with Colemak
    (key-chord-define evil-insert-state-map "ne" 'evil-normal-state)

  ;Normal mode with QWERTY
    (key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
#+end_src
** Helps

#+begin_src emacs-lisp
  (use-package which-key
               :init (which-key-mode)
               :diminish which-key-mode
               :config
               (setq which-key-idle-delay 0.3))

  (use-package counsel
               :bind (("M-x" . counsel-M-x)
                      ("C-x b" . counsel-ibuffer)
                      ("C-x C-f" . counsel-find-file)
                      :map minibuffer-local-map
                      ("C-r" . 'counsel-minibuffer-history))
                :custom
                (counsel-linux-app-format-function #'  counsel-linux-app-format-function-name-only)) 

  (use-package ivy-rich
               :init
               (ivy-rich-mode 1))

  (use-package helpful
               :custom
               (counsel-describe-function-function #'helpful-callable)
               (counsel-describe-variable-function #'helpful-command)
               :bind
               ([remap describe-function] . counsel-describe-function)
               ([remap describe-command] . helpful-command)
               ([remap describe-variable] . counsel-describe-variable)
               ([remap describe-key] . helpful-key))


#+end_src

** Projectile

#+begin_src emacs-lisp

(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/code")
    (setq projectile-project-search-path '("~/code")))
  (setq projectile-switch-project-action #'projectile-dired))

#+end_src

** Org Mode

#+begin_src emacs-lisp 
;; Org Mode Configuration ------------------------------------------------------

(defun efs/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1))

(defun efs/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

(use-package org
  :hook (org-mode . efs/org-mode-setup)
  :config
  (setq org-ellipsis " ▾")

  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  (setq org-agenda-files
	'("~/Projects/Code/emacs-from-scratch/OrgFiles/Tasks.org"
	  "~/Projects/Code/emacs-from-scratch/OrgFiles/Habits.org"
	  "~/Projects/Code/emacs-from-scratch/OrgFiles/Birthdays.org"))

  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)

  (setq org-todo-keywords
    '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
      (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

  (setq org-refile-targets
    '(("Archive.org" :maxlevel . 1)
      ("Tasks.org" :maxlevel . 1)))

  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  (setq org-tag-alist
    '((:startgroup)
       ; Put mutually exclusive tags here
       (:endgroup)
       ("@errand" . ?E)
       ("@home" . ?H)
       ("@work" . ?W)
       ("agenda" . ?a)
       ("planning" . ?p)
       ("publish" . ?P)
       ("batch" . ?b)
       ("note" . ?n)
       ("idea" . ?i)))

  ;; Configure custom agenda views
  (setq org-agenda-custom-commands
   '(("d" "Dashboard"
     ((agenda "" ((org-deadline-warning-days 7)))
      (todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))
      (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

    ("n" "Next Tasks"
     ((todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))))

    ("W" "Work Tasks" tags-todo "+work-email")

    ;; Low-effort next actions
    ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
     ((org-agenda-overriding-header "Low Effort Tasks")
      (org-agenda-max-todos 20)
      (org-agenda-files org-agenda-files)))

    ("w" "Workflow Status"
     ((todo "WAIT"
            ((org-agenda-overriding-header "Waiting on External")
             (org-agenda-files org-agenda-files)))
      (todo "REVIEW"
            ((org-agenda-overriding-header "In Review")
             (org-agenda-files org-agenda-files)))
      (todo "PLAN"
            ((org-agenda-overriding-header "In Planning")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "BACKLOG"
            ((org-agenda-overriding-header "Project Backlog")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "READY"
            ((org-agenda-overriding-header "Ready for Work")
             (org-agenda-files org-agenda-files)))
      (todo "ACTIVE"
            ((org-agenda-overriding-header "Active Projects")
             (org-agenda-files org-agenda-files)))
      (todo "COMPLETED"
            ((org-agenda-overriding-header "Completed Projects")
             (org-agenda-files org-agenda-files)))
      (todo "CANC"
            ((org-agenda-overriding-header "Cancelled Projects")
             (org-agenda-files org-agenda-files)))))))

  (setq org-capture-templates
    `(("t" "Tasks / Projects")
      ("tt" "Task" entry (file+olp "~/Projects/Code/emacs-from-scratch/OrgFiles/Tasks.org" "Inbox")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

      ("j" "Journal Entries")
      ("jj" "Journal" entry
           (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
           "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
           ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
           :clock-in :clock-resume
           :empty-lines 1)
      ("jm" "Meeting" entry
           (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
           "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
           :clock-in :clock-resume
           :empty-lines 1)

      ("w" "Workflows")
      ("we" "Checking Email" entry (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
           "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

      ("m" "Metrics Capture")
      ("mw" "Weight" table-line (file+headline "~/Projects/Code/emacs-from-scratch/OrgFiles/Metrics.org" "Weight")
       "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

  (define-key global-map (kbd "C-c j")
    (lambda () (interactive) (org-capture nil "jj")))

  (efs/org-font-setup))

(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . efs/org-mode-visual-fill))

(use-package valign
  :init (setq valign-fancy-bar t))

(org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t)
    (python . t)))

(push '("conf-unix" . conf-unix) org-src-lang-modes)

;; Automatically tangle our Emacs.org config file when we save it
(defun efs/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/Projects/Code/emacs-from-scratch/Emacs.org"))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))

(defun efs/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
		      (expand-file-name "~/.emacs.d/emacs.org"))
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

